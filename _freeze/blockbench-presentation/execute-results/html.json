{
  "hash": "6144d6226890aa9a351c760d0eeed957",
  "result": {
    "markdown": "---\ntitle: \"BLOCKBENCH: A Framework for Analyzing Private Blockchains\"\nsubtitle: \"Research Paper Presentation\"\nauthor: \"Cesaire Tobias\"\ndate: \"April 7, 2025\"\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    self-contained: true\n    embed-resources: true\n    touch: true\n    controls: true\n    slide-number: c/t\n    footer: \"Financial Software Engineering (ECO5040S) - Assignment 1\"\n    code-copy: true\n    center-title-slide: true\n    code-link: true\n    code-overflow: wrap\n    highlight-style: a11y\n    height: 1080\n    width: 1920\n    template-partials:\n      - title-slide.html\nexecute:\n  echo: true\n  eval: true\n  freeze: auto\n---\n\n\n## Overview\n\n::: incremental\n- **Problem**: Lack of systematic evaluation framework for blockchains\n- **Solution**: BLOCKBENCH - first benchmarking framework for permissioned blockchains\n- **Focus**: Private blockchains (Hyperledger, Ethereum, Parity)\n- **Goal**: Analyze performance bottlenecks in blockchain systems\n:::\n\n## Why Private Blockchains?\n\n::: {.custom-box}\nPrivate blockchains: distributed ledger systems with known, authorized participants\n:::\n\n::: incremental\n- **Enterprise Use**: Supply chain, healthcare, finance\n- **Benefits**: Higher throughput, lower latency than public chains\n- **Control**: Network management, governance, data privacy\n- **Scalability**: Better suited for high-transaction enterprise systems\n:::\n\n## BLOCKBENCH Framework\n\n::: columns\n::: {.column width=\"50%\"}\n**Design Goals:**\n- Extensible\n- Fair comparison\n- Comprehensive metrics\n- Realistic workloads\n:::\n\n::: {.column width=\"50%\"}\n**Evaluation Layers:**\n- Consensus Layer\n- Data Model\n- Execution Engine\n:::\n:::\n\n## Blockchain Platforms Analyzed\n\n::: incremental\n- **Hyperledger Fabric v0.6**: Practical Byzantine Fault Tolerance\n- **Ethereum**: Proof of Work consensus\n- **Parity**: Proof of Authority (variant of Ethereum)\n:::\n\n## Evaluation Methodology {.smaller}\n\nFour categories of workloads to stress different layers:\n\n| Workload | Layer | Description |\n|----------|-------|-------------|\n| YCSB | Data model | Key-value operations |\n| Smallbank | Execution | Banking transactions |\n| EtherId | Application | Domain name service |\n| DoNothing | Consensus | Empty smart contracts |\n\n## Performance Metrics\n\n::: incremental\n- **Throughput**: Transactions per second\n- **Latency**: Time to confirmation\n- **Scalability**: Performance with increasing nodes\n- **Fault Tolerance**: System behavior during failures\n:::\n\n## Key Findings {.smaller}\n\n::: incremental\n- All platforms **significantly underperform** vs centralized databases\n- **Hyperledger**: Better performance but unstable under high loads\n- **Ethereum/Parity**: More robust but lower throughput\n- **Consensus protocols** are major bottleneck\n- **Execution engine** efficiency affects smart contract performance\n- Platforms not **optimized for database operations**\n:::\n\n## Performance Results\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](performance-chart.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Bottlenecks Identified\n\n::: incremental\n- **Consensus Layer**: Limited throughput, high latency\n- **Data Model**: Inefficient data access patterns\n- **Execution Engine**: Interpreter overhead, limited optimization\n- **Networking**: Communication overhead between nodes\n:::\n\n## Lessons & Recommendations\n\n::: {.custom-box}\nCurrent blockchain platforms are still immature for enterprise usage\n:::\n\n::: incremental\n- Need more **optimized data models**\n- **Sharding** for improved scalability\n- Better **execution engines** for smart contracts\n- More efficient **consensus protocols**\n:::\n\n## Conclusions\n\n::: incremental\n- First systematic framework for evaluating private blockchains\n- Significant performance gaps compared to traditional databases\n- Major bottlenecks identified across all platforms\n- Roadmap for future blockchain optimization\n:::\n\n## References\n\n- Dinh, T. T. A., Wang, J., Chen, G., Liu, R., Ooi, B. C., & Tan, K. L. (2017). BLOCKBENCH: A Framework for Analyzing Private Blockchains. Proceedings of the 2017 ACM International Conference on Management of Data.\n\n- [GitHub Repository](https://github.com/ooibc88/blockbench)\n\n## Thank You {.center}\n\n::: {style=\"text-align: center\"}\nQuestions?\n\n![](https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=https://blockbench-presentation.onrender.com)\n\nPresentation available at: blockbench-presentation.onrender.com\n:::",
    "supporting": [
      "blockbench-presentation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}